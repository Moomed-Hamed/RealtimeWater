#version 430 core

layout (local_size_x = 1, local_size_y = 1) in;

layout (std430, binding = 0) buffer PositionBuffer1 {
	vec4 positionsOld[];
};

layout (std430, binding = 1) buffer PositionBuffer2 {
	vec4 positionsNew[];
};

layout (std430, binding = 2) buffer NormalBuffer {
	vec4 normals[];
};

layout (std430, binding = 3) buffer TerrainPositionBuffer {
	vec4 terrainPositions[];
};

layout (location = 0) uniform int Dimension;
layout (location = 1) uniform float DeltaTime;
layout (location = 2) uniform float Time;

layout (binding = 0) uniform sampler2D NoiseTexture;

uint calculateIndex(uvec2 location) {
	return location.y * Dimension + location.x;
}

uint clampedIndex(uvec2 location) {
	return calculateIndex(uvec2(
		max(0, min(Dimension - 1, location.x)), 
		max(0, min(Dimension - 1, location.y))));
}

void main() {
	uint index = calculateIndex(gl_GlobalInvocationID.xy);
	
	if (gl_GlobalInvocationID.x > 0 && gl_GlobalInvocationID.x < Dimension - 1 &&
		gl_GlobalInvocationID.y > 0 && gl_GlobalInvocationID.y < Dimension - 1 &&
		terrainPositions[index].y < 0) // The simulation should only happen when the terrain is below the water. 
	{	
		vec4 position = positionsOld[index];
		float c = 0.1;
		float h = 2.0 / float(Dimension);
		
		// f = c2*(u[i+1,j]+u[i-1,j]+u[i,j+1]+u[i,j-1] – 4u[i,j])/h2
		float f = c * c * (
			positionsOld[clampedIndex(gl_GlobalInvocationID.xy + uvec2(-1, 0))].y + 
			positionsOld[clampedIndex(gl_GlobalInvocationID.xy + uvec2(+1, 0))].y + 
			positionsOld[clampedIndex(gl_GlobalInvocationID.xy + uvec2(0, -1))].y + 
			positionsOld[clampedIndex(gl_GlobalInvocationID.xy + uvec2(0, +1))].y - 
			4.0 * position.y) / (h * h);	

		// v[i,j] = v[i,j] + f*∆t
		position.w = position.w + f * DeltaTime;

		//position.w += 0.001 * sin(20 * position.x * Time) ; //texture2D(NoiseTexture, vec2(gl_GlobalInvocationID.xy)).r
		
		// unew[i,j] = u[i,j] + v[i]*∆t
		position.y = position.y + position.w * DeltaTime;
		
		// Attenuation
		position.w *= 0.997;

		if (int(Time) % 8 == 0)
		{
			float efunction1 = (1.0 / sqrt(2.0 * 3.41)) * exp(-(1.0 / 2) * length(vec2(gl_GlobalInvocationID.xy) - vec2(100, 120)));
			position.y += efunction1 * 0.01;
				
        
			float efunction2 = (1.0 / sqrt(2.0 * 3.41)) * exp(-(1.0 / 2) * length(vec2(gl_GlobalInvocationID.xy) - vec2(80, 180)));
			position.y += efunction2 * 0.03;				
			
			float efunction3 = (1.0 / sqrt(2.0 * 3.41)) * exp(-(1.0 / 2) * length(vec2(gl_GlobalInvocationID.xy) - vec2(145, 180)));
			position.y += efunction3 * 0.04;				
        
		}
					
		
		
		//position.y = 0.0;
		positionsNew[index] = position;	

		
		vec4 normal = normals[index];
		vec3 toPositiveX = positionsOld[clampedIndex(gl_GlobalInvocationID.xy + uvec2(1, 0))].xyz;
		vec3 toPositiveY = positionsOld[clampedIndex(gl_GlobalInvocationID.xy + uvec2(0, 1))].xyz;
		vec3 toNegativeX = positionsOld[clampedIndex(gl_GlobalInvocationID.xy + uvec2(-1, 0))].xyz;
		vec3 toNegativeY = positionsOld[clampedIndex(gl_GlobalInvocationID.xy + uvec2(0, -1))].xyz;

		vec3 normal1 = cross(toPositiveX, toPositiveY);	
		vec3 normal2 = cross(toPositiveY, toNegativeX);	
		vec3 normal3 = cross(toNegativeX, toNegativeY);	
		vec3 normal4 = cross(toNegativeY, toPositiveX);	
		
		
		normals[index] = vec4(normalize(normal1 + normal2 + normal3 + normal4), 0.0);
	}
}