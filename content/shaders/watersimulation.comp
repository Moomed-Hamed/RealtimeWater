#version 430 core

layout (local_size_x = 1, local_size_y = 1) in;

layout (std430, binding = 0) buffer PositionBuffer1 {
	vec4 positionsPrev[];
};

layout (std430, binding = 1) buffer PositionBuffer2 {
	vec4 positionsNew[];
};

layout (std430, binding = 2) buffer NormalBuffer {
	vec4 normals[];
};

layout (std430, binding = 3) buffer TerrainPositionBuffer {
	vec4 terrainPositions[];
};

layout (location = 0) uniform int Dimension;
layout (location = 1) uniform float DeltaTime;
layout (location = 2) uniform float Time;

//layout (binding = 0) uniform sampler2D NoiseTexture;

uint calculateIndex(uvec2 location) {
	return (location.y * Dimension) + location.x;
}

uint clampedIndex(uvec2 location) {
	return calculateIndex(uvec2(
		max(0, min(Dimension - 1, location.x)), 
		max(0, min(Dimension - 1, location.y))));
}

void main()
{
	uint index = calculateIndex(gl_GlobalInvocationID.xy);
	
	float terrain_height = terrainPositions[index].y;

	if (gl_GlobalInvocationID.x > 0 && gl_GlobalInvocationID.x < Dimension - 1 &&
		gl_GlobalInvocationID.y > 0 && gl_GlobalInvocationID.y < Dimension - 1 &&
		terrain_height < 0) // simulate only when terrain is below water level. 
	{	
		vec4 position = positionsPrev[index];
		float c = 0.1;
		float h = 2.0 / float(Dimension);
		
		// f = c^2 * (u[i+1, j] + u[i-1, j] + u[i, j+1] + u[i, j-1] – 4u[i, j]) / h^2
		float f = c * c * (
			positionsPrev[clampedIndex(gl_GlobalInvocationID.xy + uvec2(-1,  0))].y + 
			positionsPrev[clampedIndex(gl_GlobalInvocationID.xy + uvec2( 1,  0))].y + 
			positionsPrev[clampedIndex(gl_GlobalInvocationID.xy + uvec2( 0, -1))].y + 
			positionsPrev[clampedIndex(gl_GlobalInvocationID.xy + uvec2( 0,  1))].y - 
			4.0 * position.y) / (h * h);

		// v[i,j] = v[i,j] + f*∆t
		position.w += f * DeltaTime;
	
		// unew[i,j] = u[i,j] + v[i]*∆t
		position.y += position.w * DeltaTime;
		
		// Attenuation
		position.w *= 0.997;

		// Pulling up some water
		if (int(Time) % 8 == 0)
		{		
			vec2 ripple_position = vec2(Dimension * 0.3, Dimension * 0.6);
		
			float scale = 0.025 / sqrt(6.28);
			float ripple = exp(-(1.0 / 2) * length(vec2(gl_GlobalInvocationID.xy) - ripple_position));

			position.y += scale * ripple;
		}

		positionsNew[index] = position;
		
		vec4 normal = normals[index];
		vec3 toPositiveX = positionsPrev[clampedIndex(gl_GlobalInvocationID.xy + uvec2(1 , 0 ))].xyz;
		vec3 toPositiveY = positionsPrev[clampedIndex(gl_GlobalInvocationID.xy + uvec2(0 , 1 ))].xyz;
		vec3 toNegativeX = positionsPrev[clampedIndex(gl_GlobalInvocationID.xy + uvec2(-1, 0 ))].xyz;
		vec3 toNegativeY = positionsPrev[clampedIndex(gl_GlobalInvocationID.xy + uvec2(0 , -1))].xyz;

		vec3 normal1 = cross(toPositiveX, toPositiveY);	
		vec3 normal2 = cross(toPositiveY, toNegativeX);	
		vec3 normal3 = cross(toNegativeX, toNegativeY);	
		vec3 normal4 = cross(toNegativeY, toPositiveX);	
		
		normals[index] = vec4(normalize(normal1 + normal2 + normal3 + normal4), 0.0);
	}
}